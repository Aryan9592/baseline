// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model BpiSubject {
  id          String @id @default(uuid())
  name        String
  description String
  type        Int
  publicKey   String
  OwnedBpiSubjectAccounts BpiSubjectAccount[] @relation(name: "ownerBpiSubject_fk")
  CreatedBpiSubjectAccounts BpiSubjectAccount[] @relation(name: "creatorBpiSubject_fk")
  sentMessages Message[] @relation(name: "fromBpiSubject_fk")
  receivedMessages Message[] @relation(name: "toBpiSubject_fk")
  administratedWorkgroup AdministratorsOnWorkgroups[]
}

model BpiAccount {
  id    String @id @default(uuid())
  nonce Int
  ownerBpiSubjectAccounts BpiSubjectAccount[]
}

model BpiSubjectAccount {
  id                  String @id @default(uuid())
  creatorBpiSubjectId String
  ownerBpiSubjectId   String
  bpiAccounts         BpiAccount[]
  CreatorBpiSubject   BpiSubject  @relation(fields: [creatorBpiSubjectId], references: [id], name: "creatorBpiSubject_fk")
  OwnerBpiSubject     BpiSubject  @relation(fields: [ownerBpiSubjectId], references: [id], name: "ownerBpiSubject_fk")
}

model Workstep {
  id             String     @id @default(uuid())
  name           String
  version        String
  status         String
  workgroupId    String
  securityPolicy String
  privacyPolicy  String
  workflow       Workflow[]
}

model Workflow {
  id          String     @id @default(uuid())
  name        String
  workgroupId String
  worksteps   Workstep[]
  workgroup   Workgroup  @relation(fields: [workgroupId], references: [id])
}

model Workgroup {
  id             String                       @id @default(uuid())
  name           String
  administrators AdministratorsOnWorkgroups[]
  securityPolicy String
  privacyPolicy  String
  workflows      Workflow[]
}

model AdministratorsOnWorkgroups {
  workgroup       Workgroup  @relation(fields: [workgroupId], references: [id])
  workgroupId     String
  administrator   BpiSubject @relation(fields: [administratorId], references: [id])
  administratorId String

  @@id([workgroupId, administratorId])
}

model Transaction {
  id                 String @id
  nonce              Int
  workflowInstanceId String
  workstepInstanceId String
  from               String // Add BpiAccount once #489 done
  to                 String // Add BpiAccount once #489 done
  payload            String
  signature          String
  status             Int
}

model Message {
  id               String     @id
  fromBpiSubjectId String
  FromBpiSubject   BpiSubject @relation(fields: [fromBpiSubjectId], references: [id], name: "fromBpiSubject_fk")
  toBpiSubjectId   String
  ToBpiSubject     BpiSubject @relation(fields: [toBpiSubjectId], references: [id], name: "toBpiSubject_fk")
  content          String
  signature        String
  type             Int
}
